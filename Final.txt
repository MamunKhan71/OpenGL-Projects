#include <GL/gl.h>
#include <GL/glut.h>
#include <cstdlib>
#include <cmath>
int windowWidth = 1920;
int windowHeight = 1080;
int numBubbles = 20;
float bubbleRadius = 20.0;
float bubbleSpeed = 1.0;
float bubblePositionX[100];
float bubblePositionY[100];

float fishPosX = 50.0; // Initial X position of the fish

void fish1(int s) {
   // Triangle 1
   glColor3f(0.39, 0.58, 0.93); // Light blue
   glBegin(GL_TRIANGLES);
   glVertex3f(20.375566 + fishPosX, 35.024176+s, 0.0);
   glVertex3f(20.21639 + fishPosX, 74.022232+s, 0.0);
   glVertex3f(39.95418 + fishPosX, 54.28444+s, 0.0);
   glEnd();

   // Triangle 2
   glColor3f(1.0, 0.56, 0.0); // Orange
   glBegin(GL_TRIANGLES);
   glVertex3f(39.95418 + fishPosX, 54.28444+s, 0.0);
   glVertex3f(59.37362 + fishPosX, 73.70389+s, 0.0);
   glVertex3f(59.055268 + fishPosX, 35.024176+s, 0.0);
   glEnd();

   // Triangle 3
   glColor3f(0.87, 0.43, 0.63); // Pink
   glBegin(GL_TRIANGLES);
   glVertex3f(59.37362 + fishPosX, 73.70389+s, 0.0);
   glVertex3f(78.792 + fishPosX, 54.125264+s, 0.0);
   glVertex3f(59.055268 + fishPosX, 35.024176+s, 0.0);
   glEnd();

   // Triangle 4
   glColor3f(0.4, 0.72, 0.41); // Green
   glBegin(GL_TRIANGLES);
   glVertex3f(48.072143 + fishPosX, 62.561576+s, 0.0);
   glVertex3f(39.635829 + fishPosX, 93.44167+s, 0.0);
   glVertex3f(59.37362 + fishPosX, 73.70389+s, 0.0);
   glEnd();

   // Triangle 5
   glColor3f(0.93, 0.78, 0.31); // Yellow
   glBegin(GL_TRIANGLES);
   glVertex3f(48.072143 + fishPosX, 46.166477+s, 0.0);
   glVertex3f(40.0 + fishPosX, 16.0+s, 0.0);
   glVertex3f(59.055268 + fishPosX, 35.024176+s, 0.0);
   glEnd();

   glFlush();
}
void update(int value) {
   fishPosX += 5.0; // Move the fish to the right by 10 units
   if (fishPosX > 1800.0)
      fishPosX = 50.0; // Reset the fish position if it goes off-screen

   glutPostRedisplay();
   glutTimerFunc(30, update, 0); // Call the update function after 100 milliseconds
}
void drawGrass()
{
    // Define colors for different layers of grass
    GLfloat darkGreen[] = { 0.0f, 0.392f, 0.0f };
    GLfloat lightGreen[] = { 0.0f, 0.749f, 0.0f };

    // Draw multiple layers of grass with varying heights
    for (int j = 0; j < 2; j++) {
        glColor3fv(j == 0 ? darkGreen : lightGreen);
        glLineWidth(2.0f - j);

        // Draw grass using lines and curves
        for (int i = 50; i < 1870; i += 10) {
            glBegin(GL_LINES);
            glVertex2f(i, 0.0f);
            glVertex2f(i + 5, 30.0f - j * 10);
            glEnd();

            glBegin(GL_LINES);
            glVertex2f(i + 5, 30.0f - j * 10);
            glVertex2f(i + 10, 0.0f);
            glEnd();

            glBegin(GL_LINES);
            glVertex2f(i + 5, 30.0f - j * 10);
            glVertex2f(i + 5, 50.0f - j * 10);
            glEnd();

            glBegin(GL_LINES);
            glVertex2f(i + 2, 0.0f);
            glVertex2f(i + 3, 15.0f - j * 5);
            glEnd();

            glBegin(GL_LINES);
            glVertex2f(i + 8, 0.0f);
            glVertex2f(i + 7, 15.0f - j * 5);
            glEnd();

            glBegin(GL_LINES);
            glVertex2f(i + 3, 15.0f - j * 5);
            glVertex2f(i + 5, 20.0f - j * 5);
            glEnd();

            glBegin(GL_LINES);
            glVertex2f(i + 7, 15.0f - j * 5);
            glVertex2f(i + 5, 20.0f - j * 5);
            glEnd();

            // Draw additional lines to make the grass appear denser and more realistic
            glBegin(GL_LINES);
            glVertex2f(i, 0.0f);
            glVertex2f(i + 3, 20.0f - j * 8);
            glEnd();

            glBegin(GL_LINES);
            glVertex2f(i + 3, 20.0f - j * 8);
            glVertex2f(i + 6, 0.0f);
            glEnd();

            glBegin(GL_LINES);
            glVertex2f(i + 2, 0.0f);
            glVertex2f(i + 4, 20.0f - j * 8);
            glEnd();

            glBegin(GL_LINES);
            glVertex2f(i + 4, 20.0f - j * 8);
            glVertex2f(i + 7, 0.0f);
            glEnd();

            glBegin(GL_LINES);
            glVertex2f(i + 1, 0.0f);
            glVertex2f(i + 5, 18.0f - j * 7);
            glEnd();

            glBegin(GL_LINES);
            glVertex2f(i + 5, 18.0f - j * 7);
            glVertex2f(i + 9, 0.0f);
            glEnd();
        }
    }
}
void drawAquarium()
{
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw aquarium
    glColor3f(0.678f, 0.847f, 0.902f);
    glBegin(GL_POLYGON);
    glVertex2f(0.0f, 0.0f);
    glVertex2f(0.0f, 1080.0f);
    glVertex2f(1920.0f, 1080.0f);
    glVertex2f(1920.0f, 0.0f);
    glEnd();

    // Draw left border
    glColor3f(0.282f, 0.239f, 0.545f);  // White color
    glBegin(GL_POLYGON);
    glVertex2f(0.0f, 0.0f);
    glVertex2f(50.0f, 0.0f);
    glVertex2f(50.0f, 1080.0f);
    glVertex2f(0.0f, 1080.0f);
    glEnd();

    // Draw right border
    glBegin(GL_POLYGON);
    glVertex2f(1870.0f, 0.0f);
    glVertex2f(1920.0f, 0.0f);
    glVertex2f(1920.0f, 1080.0f);
    glVertex2f(1870.0f, 1080.0f);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex2f(0.0f, 0.0f);
    glVertex2f(1920.0f, 0.0f);
    glVertex2f(1920.0f, 50.0f);
    glVertex2f(0.0f, 50.0f);
    glEnd();
    glPushMatrix();
    glTranslatef(0.0f, 50.0f, 0.0f);
    drawGrass();
    glPopMatrix();
    glFlush();
}
void drawBubbles() {

   // Draw water bubbles as outlined circles
   glColor3f(1.0, 1.0, 1.0);
   glPointSize(1.0);
   glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); // Enable only stroke color

   // Draw the stream of bubbles from a specific point
   int streamX = 250;
   int streamY = 100;

   for (int i = 0; i < numBubbles; ++i) {
      glPushMatrix();
      glTranslatef(bubblePositionX[i], bubblePositionY[i], 0.0);

      // Calculate the distance from the stream point
      float dx = bubblePositionX[i] - streamX;
      float dy = bubblePositionY[i] - streamY;
      float distance = sqrt(dx * dx + dy * dy);

      // Adjust the bubble size based on the distance from the stream point
      float bubbleSize = bubbleRadius * (1.0 - distance / (windowHeight - streamY));

      glBegin(GL_POLYGON);
      for (int j = 0; j <= 360; j++) {
         float angle = j * 3.14159 / 180.0;
         float x = bubbleSize * cos(angle);
         float y = bubbleSize * sin(angle);
         glVertex2f(x, y);
      }
      glEnd();
      glPopMatrix();
   }

   glPolygonMode(GL_FRONT_AND_BACK, GL_FILL); // Restore fill mode
   glFlush();
}


void updateBubbles() {
   // Update bubble positions
   for (int i = 0; i < numBubbles; ++i) {
      bubblePositionY[i] += bubbleSpeed;

      // If bubble goes beyond the top of the aquarium, reset its position
      if (bubblePositionY[i] > windowHeight - 50) {
         bubblePositionX[i] = rand() % (windowWidth - 100) + 50;
         bubblePositionY[i] = 50;
      }

      // Check for overlap with other bubbles
      for (int j = 0; j < numBubbles; ++j) {
         // Skip the current bubble
         if (i == j) continue;

         // Calculate the distance between the bubbles
         float dx = bubblePositionX[i] - bubblePositionX[j];
         float dy = bubblePositionY[i] - bubblePositionY[j];
         float distance = sqrt(dx * dx + dy * dy);

         // If the distance is less than the sum of the bubble radii, adjust the position
         if (distance < 2 * bubbleRadius) {
            bubblePositionX[i] += (2 * bubbleRadius - distance) * dx / distance;
            bubblePositionY[i] += (2 * bubbleRadius - distance) * dy / distance;
         }
      }
   }
}
void init() {
   glClearColor(0.0, 0.0, 0.0, 0.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   gluOrtho2D(0.0, windowWidth, 0.0, windowHeight);

   // Initialize bubble positions
   for (int i = 0; i < numBubbles; ++i) {
      bubblePositionX[i] = rand() % (windowWidth - 100) + 50;
      bubblePositionY[i] = rand() % (windowHeight - 100) + 50;
   }
}
void display() {
   glClear(GL_COLOR_BUFFER_BIT);

   drawAquarium();
   drawBubbles();

    fish1(400);
   glutSwapBuffers();
}

void timer(int) {
   updateBubbles();
   glutPostRedisplay();
   glutTimerFunc(10, timer, 0);
}

int main(int argc, char** argv) {
   glutInit(&argc, argv);
   glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
   glutInitWindowSize(windowWidth, windowHeight);
   glutInitWindowPosition(100, 100);
   glutCreateWindow("Fish Aquarium with Water Bubbles");
   init();
   glutDisplayFunc(display);
   glutTimerFunc(10, timer, 0);
   glutTimerFunc(0, update, 0);
   glutMainLoop();
   return 0;
}
