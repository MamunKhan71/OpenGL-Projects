#include<windows.h>
#include <GL/glut.h>

void init(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);	// Set display window colour to white

	glMatrixMode(GL_PROJECTION);		// Set projection parameters
	gluOrtho2D(0.0, 10.0, 0.0, 10.0);
}

void drawShapes(void)
{
	glClear(GL_COLOR_BUFFER_BIT);	// Clear display window

	//Set colour to black
	glColor3f(0.0, 0.0, 0.0);
	//Adjust the point size
	glPointSize(5.0);

	//Set colour to red
	glColor3f(1.0, 0.0, 0.0);

	// Draw an outlined triangle
    glBegin(GL_TRIANGLES);
    	glColor3f(1.0, 0.0, 0.0);
        glVertex3d(1,7,0);
        glVertex3d(5,9,0);
        glVertex3d(9,7,0);
	glEnd();
    glColor3f(0.0, 1.0, 0.0);
    glBegin(GL_QUADS);
        glVertex3d(9,7,0);
        glVertex3d(9,3,0);
        glVertex3d(1,3,0);
        glVertex3d(1,7,0);
	glEnd();
    glColor3f(0.0,0.0,1.0);
    glBegin(GL_QUADS);
        glVertex3d(4,3,0);
        glVertex3d(4,6,0);
        glVertex3d(6,6,0);
        glVertex3d(6,3,0);
    glEnd();

    glBegin(GL_QUADS);
        glVertex3d(2,4,0);
        glVertex3d(2,5,0);
        glVertex3d(3,5,0);
        glVertex3d(3,4,0);
    glEnd();
    glBegin(GL_QUADS);
        glVertex3d(7,4,0);
        glVertex3d(7,5,0);
        glVertex3d(8,5,0);
        glVertex3d(8,4,0);
    glEnd();

    glBegin(GL_QUADS);
        glVertex3d(0,2,0);
        glVertex3d(0,3,0);
        glVertex3d(10,3,0);
        glVertex3d(10,2,0);
    glEnd();
	glFlush();	// Process all OpenGL routines
}

int main(int argc, char* argv[])
{
	glutInit(&argc, argv);						// Initalise GLUT
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);	// Set display mode

	glutInitWindowPosition(50, 100);				// Set window position
	glutInitWindowSize(400, 300);					// Set window size
	glutCreateWindow("An Example OpenGL Program");	// Create display window

	init();							// Execute initialisation procedure
	glutDisplayFunc(drawShapes);		// Send graphics to display window
	glutMainLoop();					// Display everything and wait

	return 0;
}
