#include<windows.h>
#include<math.h>
#include <GL/glut.h>

void init(void)
{
    glClearColor(1.0, 1.0, 1.0, 0.0);    // Set display window colour to white

    glMatrixMode(GL_PROJECTION);        // Set projection parameters
    gluOrtho2D(0.0, 15.0, 0.0, 15.0);
}

void drawShapes(void)
{
    glColor3f(0.0f, 1.0f, 0.0f);
    glBegin(GL_TRIANGLES);
        glVertex3f(8.3991249285792f * 1.5f, 3.713571078539f * 1.5f, 0.0f);
        glVertex3f(9.0f * 1.5f, 3.2f * 1.5f, 0.0f);
        glVertex3f(9.0f * 1.5f, 4.2f * 1.5f, 0.0f);
    glEnd();
    glBegin(GL_TRIANGLES);
        glVertex3f(9.0f * 1.5f, 3.4f * 1.5f, 0.0f);
        glVertex3f(9.5952837917378f * 1.5f, 3.704102802f * 1.5f, 0.0f);
        glVertex3f(9.0f * 1.5f, 4.0f * 1.5f, 0.0f);
    glEnd();
    glBegin(GL_TRIANGLES);
        glVertex3f(9.3996060885298f * 1.5f, 3.6977906186035f * 1.5f, 0.0f);
        glVertex3f(9.8f * 1.5f, 3.4f * 1.5f, 0.0f);
        glVertex3f(9.8f * 1.5f, 4.0f * 1.5f, 0.0f);
    glEnd();

    // Draw fish eye (circle)
    const float eyeRadius = 0.1; // Radius of the eye circle
    const int numSegments = 100; // Number of line segments to approximate the circle

    glColor3f(0.0f, 0.0f, 0.0f); // Set eye color to black
    glBegin(GL_TRIANGLE_FAN);
    glVertex3f(8.7052658513401f * 1.5f, 3.7987855621f * 1.5f, 0.0f); // Center of the eye circle
    for (int i = 0; i <= numSegments; ++i)
    {
        float theta = 2.0 * M_PI * float(i) / float(numSegments); // Calculate the angle for each segment
        float x = 8.7052658513401f * 1.5f + eyeRadius * cos(theta); // Calculate the x-coordinate
        float y = 3.7987855621f * 1.5f + eyeRadius * sin(theta); // Calculate the y-coordinate
        glVertex2f(x, y); // Add a vertex to the circle
    }
    glEnd();

    glFlush();    // Process all OpenGL routines
}


int main(int argc, char* argv[])
{
    glutInit(&argc, argv);                        // Initialise GLUT
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);    // Set display mode

    glutInitWindowPosition(50, 100);                // Set window position
    glutInitWindowSize(400, 300);                    // Set window size
    glutCreateWindow("An Example OpenGL Program");    // Create display window

    init();                            // Execute initialisation procedure
    glutDisplayFunc(drawShapes);        // Send graphics to display window
    glutMainLoop();                    // Display everything and wait

    return 0;
}
